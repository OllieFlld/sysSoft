import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.lang.ClassNotFoundException;
import java.util.*;
import java.util.List;

public class Server {
    static final int PORT = 4445;
    private JPanel mainPanel;
    public JTextArea stationDataDisplay;
    private JList stationNameDisplay;

    Map<Integer, ServerThread> connectedClientsIDs;

    ServerSocket serverSocket;
    Socket socket;

    public Server() {
        this.serverSocket = null;
        this.socket = null;
        this.connectedClientsIDs = new HashMap<Integer, ServerThread>();
    }


    public static void main(String args[]) {

        Server server = new Server();


        try {
            server.serverSocket = new ServerSocket(PORT);
        } catch (IOException e) {
            e.printStackTrace();

        }
        JFrame frame = new JFrame("Server");
        frame.setContentPane(new Server().mainPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(200, 200, 800, 600);
        frame.setVisible(true);
        while (true) {

            try {
                server.socket = server.serverSocket.accept();
                //System.out.println("New connection!");

                DataInputStream inputStream = new DataInputStream(server.socket.getInputStream());
                DataOutputStream outputStream = new DataOutputStream(server.socket.getOutputStream());

                // new thread for a client
                ServerThread thread = new ServerThread(server.socket, inputStream, outputStream, server.generateNewID());
                thread.start();
                server.connectedClientsIDs.put(thread.getClientID(), thread);

                //server.threadList.add(thread);
                server.stationDataDisplay.append("hello");

                server.displayStationData(server.getDataFromThread(3));
                //stationNameDisplay.add(server.connectedClientsIDs);
                System.out.println(server.connectedClientsIDs);


            } catch (Exception e) {
                System.out.println("I/O error: " + e);
            }
        }
    }

    public int generateNewID() {
        /*
        Random random = new Random();
        int ID = random.nextInt(100);

        if (connectedClientsIDs.containsKey(ID)) {
            generateNewID();
        }
        */
        int ID = 3;
        return ID;
    }

    public void removeFromConnectedList(int clientID) {
        connectedClientsIDs.remove(clientID);

    }

    public List<weatherStationData> getDataFromThread(int clientID) {
        ServerThread tempthread;
        tempthread = connectedClientsIDs.get(clientID);
        return tempthread.dataList;


    }

    private void displayStationData(List<weatherStationData> dataList) {
        System.out.println("help");
        for (weatherStationData x : dataList) {
            String test = Double.toString(x.humidity) + "," + Double.toString(x.windforce) + "," + Double.toString(x.tempreture) + "," + Double.toString(x.barometric) + "," + Double.toString(x.pressure);
            stationDataDisplay.setText(test);
            System.out.println(test);

        }

    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        stationDataDisplay = new JTextArea();
        stationDataDisplay.setText("");
        mainPanel.add(stationDataDisplay, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        stationNameDisplay = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        stationNameDisplay.setModel(defaultListModel1);
        mainPanel.add(stationNameDisplay, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}

